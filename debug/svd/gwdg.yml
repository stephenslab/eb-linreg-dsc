# To run the DSC on the GWDG cluster, connect to a GWDG login
# node, and run this:
#
#  dsc --host gwdg.yml linreg.dsc
# 
# Note that you have to load the modules first
# module load gcc (L0Learn was installed using gcc/10.2.0)
# module load intel-parallel-studio/cluster.2020.4 (R installed with MKL)
#
# R and Python could be loaded as modules in frontends and sbatch jobs
# module load R/4.0.4
# conda activate /cbscratch/sbanerj/software/python/envs/py39
#
# Non-interactive shell logins in GWDG do not load user ~/.bashrc
# Hence, loading conda and local modules are not being processed by jobs.
# Hence I used the following hack:
#     source /usr/users/sbanerj/.bashrc
#
# Each exclusive GWDG node has 16 cores and 128GB memory.
# Maximum of 2048 jobs are submitted to each node (with threading -c 16)
# which averages to 128 jobs per core. 
#
# Error on GWDG:
# Error: mkl-service + Intel(R) MKL: MKL_THREADING_LAYER=INTEL is incompatible with libgomp.so.1 library.
#	Try to import numpy first or set the threading layer accordingly. Set MKL_SERVICE_FORCE_INTEL to force it.
# export MKL_SERVICE_FORCE_INTEL=1
# export OMP_NUM_THREADS=1
#

DSC:
  gwdg:
    address: localhost
    queue_type: pbs
    status_check_interval: 20
    max_running_jobs: 30
    task_template: |
      #!/bin/bash
      #SBATCH -A cramer
      #SBATCH -p em
      #SBATCH --time=0-00:05:00
      #SBATCH -c 1
      #SBATCH -N 1
      #SBATCH -o slurm-out/slurm-%j.out
      #SBATCH -e slurm-out/slurm-%j.err
      source /usr/users/sbanerj/.bashrc
      module load gcc/9.3.0
      module load intel-parallel-studio/cluster.2020.4
      module load R/4.0.4
      conda activate /cbscratch/sbanerj/software/python/envs/py39
      export MKL_SERVICE_FORCE_INTEL=1
      export OMP_NUM_THREADS=16
    submit_cmd: sbatch {job_file}
    submit_cmd_output: "Submitted batch job {job_id}"
    status_cmd: squeue --job {job_id}
    kill_cmd: scancel {job_id}

default:
  queue: gwdg
  instances_per_job: 2
  instances_per_node: 1
  cpus_per_instance: 1
  time_per_instance: '00:05:00'
